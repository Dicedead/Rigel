package ch.epfl.rigel.gui;

import ch.epfl.rigel.astronomy.AsterismLoader;
import ch.epfl.rigel.astronomy.HygDatabaseLoader;
import ch.epfl.rigel.astronomy.StarCatalogue;
import ch.epfl.rigel.coordinates.GeographicCoordinates;
import ch.epfl.rigel.coordinates.HorizontalCoordinates;
import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.collections.FXCollections;
import javafx.geometry.Orientation;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Control;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.Separator;
import javafx.scene.control.TextField;
import javafx.scene.control.TextFormatter;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.converter.LocalTimeStringConverter;
import javafx.util.converter.NumberStringConverter;

import java.io.IOException;
import java.io.InputStream;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Locale;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Main program class (version: step 11)
 *
 * @author Alexandre Sallinen (303162)
 * @author Salim Najib (310003)
 */
public final class Main extends Application {

    private static final GeographicCoordinates INITIAL_GEO_COORDS = GeographicCoordinates.ofDeg(6.57, 46.52);
    private static final HorizontalCoordinates INITIAL_CENTER = HorizontalCoordinates.ofDeg(180.000000000001, 15);
    private static final NamedTimeAccelerator INITIAL_ACCELERATOR = NamedTimeAccelerator.TIMES_300;
    private static final double INITIAL_FOV = 100;
    private static final int MIN_WIDTH = 800;
    private static final int MIN_HEIGHT = 600;
    private static final String INPUT_HYGDATA = "/hygdata_v3.csv";
    private static final String INPUT_ASTERISMS = "/asterisms.txt";
    private static final String INPUT_FONT = "/Font Awesome 5 Free-Solid-900.otf";

    //Styles:
    private static final String CONTROL_BAR_STYLE = "-fx-spacing: 4; -fx-padding: 4;";
    private static final String POSITION_HBOX_STYLE = "-fx-spacing: inherit; -fx-alignment: baseline-left;";
    private static final String POSITION_TXTFIELDS_STYLE = "-fx-pref-width: 60; -fx-alignment: baseline-right;";
    private static final String TIME_HBOX_STYLE = "-fx-spacing: inherit; -fx-alignment: baseline-left;";
    private static final String TIME_DATEPICK_STYLE = "-fx-pref-width: 120;";
    private static final String TIME_TXTFIELD_STYLE = "-fx-pref-width: 75;-fx-alignment: baseline-right;";
    private static final String TIME_ZONECOMBOBOX_STYLE = "-fx-pref-width: 180;";
    private static final String ACC_HBOX_STYLE = "-fx-spacing: inherit;";
    private static final String INFO_BAR_STYLE = "-fx-padding: 4; -fx-background-color: white;";

    private static final String PLAY_BUTTON_TEXT = "\uf04b";
    private static final String PAUSE_BUTTON_TEXT = "\uf04c";
    private static final String RESET_BUTTON_TEXT = "\uf0e2";
    private static final int FONT_SIZE = 15;

    public static void main(String[] args) {
        launch(args);
    }

    /**
     * JavaFX application start method, creating all links, nodes, and other items
     *
     * @param primaryStage (Stage) used window
     */
    @Override
    public void start(Stage primaryStage) {
        try (InputStream hs = resourceStream(INPUT_HYGDATA);
             InputStream ast = resourceStream(INPUT_ASTERISMS);
             InputStream fs = resourceStream(INPUT_FONT)) {

            Font fontAwesome = Font.loadFont(fs, FONT_SIZE);
            BlackBodyColor.init();

            StarCatalogue catalogue = new StarCatalogue.Builder()
                    .loadFrom(hs, HygDatabaseLoader.INSTANCE)
                    .loadFrom(ast, AsterismLoader.INSTANCE)
                    .build();

            ZonedDateTime when = ZonedDateTime.now();
            DateTimeBean dateTimeBean = new DateTimeBean();
            dateTimeBean.setZonedDateTime(when);

            ObserverLocationBean observerLocationBean = new ObserverLocationBean();
            observerLocationBean.setCoordinates(INITIAL_GEO_COORDS);

            ViewingParametersBean viewingParametersBean = new ViewingParametersBean();
            viewingParametersBean.setCenter(INITIAL_CENTER);
            viewingParametersBean.setFieldOfViewDeg(INITIAL_FOV);

            TimeAnimator animator = new TimeAnimator(dateTimeBean);
            SkyCanvasManager manager = new SkyCanvasManager(catalogue, dateTimeBean,
                    observerLocationBean, viewingParametersBean);

            primaryStage.setMinWidth(MIN_WIDTH);
            primaryStage.setMinHeight(MIN_HEIGHT);
            primaryStage.setTitle("Rigel");

            primaryStage.setScene(new Scene(new BorderPane(canvasPane(manager),
                    controlBar(observerLocationBean, animator, dateTimeBean, fontAwesome), null,
                    informationBar(manager, viewingParametersBean), null)));
            primaryStage.show();
            manager.canvas().requestFocus();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private HBox controlBar(ObserverLocationBean observerLocationBean, TimeAnimator animator, DateTimeBean dateTimeBean,
                            Font font) {
        HBox controlBar = new HBox(positionHBox(observerLocationBean),
                new Separator(Orientation.VERTICAL), timeHBox(animator, dateTimeBean),
                new Separator(Orientation.VERTICAL), accelerationHbox(font, animator, dateTimeBean));
        controlBar.setStyle(CONTROL_BAR_STYLE);

        return controlBar;
    }

    private HBox positionHBox(ObserverLocationBean observerLocationBean) {
        Label longLabel = new Label("Longitude (°) :");
        Label latLabel  = new Label("Latitude (°) :");
        TextField longTextField = new TextField();
        TextField latTextField = new TextField();
        longTextField.setStyle(POSITION_TXTFIELDS_STYLE);
        latTextField.setStyle(POSITION_TXTFIELDS_STYLE);

        NumberStringConverter positionConverter = new NumberStringConverter("#0.00");

        UnaryOperator<TextFormatter.Change> lonFilter = coordFilter(positionConverter, GeographicCoordinates::isValidLonDeg);
        UnaryOperator<TextFormatter.Change> latFilter = coordFilter(positionConverter, GeographicCoordinates::isValidLatDeg);

        TextFormatter<Number> lonTextFormatter = new TextFormatter<>(positionConverter, 0, lonFilter);
        TextFormatter<Number> latTextFormatter = new TextFormatter<>(positionConverter, 0, latFilter);

        longTextField.setTextFormatter(lonTextFormatter);
        latTextField.setTextFormatter(latTextFormatter);

        lonTextFormatter.valueProperty().bindBidirectional(observerLocationBean.lonDegProperty());
        latTextFormatter.valueProperty().bindBidirectional(observerLocationBean.latDegProperty());

        HBox positionHBox = new HBox(longLabel, longTextField, latLabel, latTextField);
        positionHBox.setStyle(POSITION_HBOX_STYLE);

        return positionHBox;
    }

    private HBox timeHBox(TimeAnimator animator, DateTimeBean dateTimeBean) {
        Label dateLabel = new Label("Date :");
        DatePicker datePicker = new DatePicker();
        datePicker.setStyle(TIME_DATEPICK_STYLE);
        datePicker.valueProperty().bindBidirectional(dateTimeBean.dateProperty());

        Label hourLabel = new Label("Heure :");
        TextField hourTextField = new TextField();
        hourTextField.setStyle(TIME_TXTFIELD_STYLE);

        DateTimeFormatter hmsFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
        LocalTimeStringConverter hourConverter = new LocalTimeStringConverter(hmsFormatter, hmsFormatter);
        TextFormatter<LocalTime> timeFormatter = new TextFormatter<>(hourConverter);
        hourTextField.setTextFormatter(timeFormatter);
        timeFormatter.valueProperty().bindBidirectional(dateTimeBean.timeProperty());

        ComboBox<ZoneId> zoneList = new ComboBox<>();
        zoneList.setStyle(TIME_ZONECOMBOBOX_STYLE);
        zoneList.getItems().addAll(ZoneId.getAvailableZoneIds()
                .stream()
                .sorted()
                .map(ZoneId::of)
                .collect(Collectors.toList()));
        zoneList.valueProperty().bindBidirectional(dateTimeBean.zoneProperty());

        HBox timeHBox = new HBox(dateLabel, datePicker, hourLabel, hourTextField, zoneList);
        timeHBox.setStyle(TIME_HBOX_STYLE);

        disableWhenRunning(animator, hourTextField, datePicker, zoneList);

        return timeHBox;
    }

    private HBox accelerationHbox(Font fontAwesome, TimeAnimator animator, DateTimeBean dateTimeBean) {
        ChoiceBox<NamedTimeAccelerator> acceleratorList =
                new ChoiceBox<>(FXCollections.observableArrayList(NamedTimeAccelerator.values()));
        acceleratorList.valueProperty().addListener((p, o, n) -> animator.setAccelerator(n.getAccelerator()));
        /* This does the same job as the recommended Bindings.select way but seems more concise. */
        acceleratorList.setValue(INITIAL_ACCELERATOR);

        Button resetButton = new Button(RESET_BUTTON_TEXT);
        Button startPauseButton = new Button();
        resetButton.setFont(fontAwesome);
        startPauseButton.setFont(fontAwesome);
        startPauseButton.textProperty().bind(Bindings.when(animator.runningProperty())
                .then(PAUSE_BUTTON_TEXT)
                .otherwise(PLAY_BUTTON_TEXT));

        startPauseButton.setOnAction(e -> {
            if (animator.isRunning()) {
                animator.stop();
            } else {
                animator.start();
            }
        });

        resetButton.setOnAction(click -> dateTimeBean.setZonedDateTime(ZonedDateTime.now()));

        HBox accelerationHbox = new HBox(acceleratorList, resetButton, startPauseButton);
        accelerationHbox.setStyle(ACC_HBOX_STYLE);

        disableWhenRunning(animator, resetButton, acceleratorList);

        return accelerationHbox;
    }

    private void disableWhenRunning(TimeAnimator animator,Control... controls) {
        Arrays.stream(controls).forEach(e -> e.disableProperty().bind(animator.runningProperty()));
    }

    private Pane canvasPane(SkyCanvasManager manager) {
        Pane canvasPane = new Pane(manager.canvas());
        manager.canvas().widthProperty().bind(canvasPane.widthProperty());
        manager.canvas().heightProperty().bind(canvasPane.heightProperty());

        return canvasPane;
    }

    private BorderPane informationBar(SkyCanvasManager manager, ViewingParametersBean viewingParametersBean) {
        Text fovText = new Text();
        fovText.textProperty().bind(Bindings.format(Locale.ROOT, "Champ de vue : %.1f°",
                viewingParametersBean.fieldOfViewDegProperty()));

        Text objectUnderMouseText = new Text();
        manager.objectUnderMouseProperty().addListener((p, o, n) ->
                n.ifPresentOrElse(celestialObject -> objectUnderMouseText.setText(celestialObject.info()),
                        () -> objectUnderMouseText.setText("")));

        Text mousePosText = new Text();
        mousePosText.textProperty().bind(Bindings.format(Locale.ROOT, "Azimut : %.2f°, hauteur : %.2f°",
                manager.mouseAzDegProperty(), manager.mouseAltDegProperty()));

        BorderPane informationBar = new BorderPane(objectUnderMouseText, null, mousePosText, null, fovText);
        informationBar.setStyle(INFO_BAR_STYLE);

        return informationBar;
    }

    private InputStream resourceStream(String s) {
        return getClass().getResourceAsStream(s);
    }

    private static UnaryOperator<TextFormatter.Change> coordFilter(NumberStringConverter stringConv, Predicate<Double> validCoord) {
        return (change -> {
            try {
                String newText = change.getControlNewText();
                double newCoordDeg = stringConv.fromString(newText).doubleValue();
                return (validCoord.test(newCoordDeg)) ? change : null;
            } catch (Exception e) {
                return null;
            }
        });
    }
}
